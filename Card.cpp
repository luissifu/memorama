#include "Card.h"

Card::Card() {
	value = 0;
	show = selected = false;
}

Card::Card(int value) {
	this->value = value;
	show = selected = false;
}

void Card::flip() {
	show = !show;
}

bool Card::shouldShow() {
	return show;
}

void Card::setShow(bool show) {
	this->show = show;
}

int Card::getValue() {
	return value;
}

void Card::setValue(int value) {
	this->value = value;
}

void Card::draw(float ang) {
GLubyte tres[] = {
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x01,0x37,0xFF,0xFF,
0x01,0x37,0xFF,0xFF,
0x01,0x37,0xFF,0xFF,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x01,0x37,0xFF,0xFF,
0x01,0x37,0xFF,0xFF,
0x01,0x37,0xFF,0xFF,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x01,0x37,0xFF,0xFF,
0x01,0x37,0xFF,0xFF,
0x01,0x37,0xFF,0xFF,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
};
	GLubyte seis[] = {
0xF0,0x00,0x00,0x0F,
0xC0,0x00,0x00,0x03,
0x80,0x01,0x80,0x01,
0x80,0x07,0xE0,0x01,
0x00,0x1E,0x78,0x00,
0x00,0x18,0x18,0x00,
0x00,0x30,0x0C,0x00,
0x00,0x30,0x0C,0x00,
0x00,0x60,0x06,0x00,
0x00,0x60,0x06,0x00,
0x00,0x30,0x0F,0x00,
0x00,0x30,0x0F,0x00,
0x00,0x18,0x1B,0x00,
0x00,0x1E,0x7B,0x00,
0x00,0x07,0xE3,0x00,
0x00,0x01,0x83,0x00,
0x00,0x00,0x03,0x00,
0x00,0x00,0x03,0x00,
0x00,0x00,0x03,0x00,
0x00,0x00,0x03,0x00,
0x00,0x00,0x03,0x00,
0x00,0x60,0x07,0x00,
0x00,0x60,0x06,0x00,
0x00,0x30,0x0C,0x00,
0x00,0x30,0x0C,0x00,
0x00,0x18,0x18,0x00,
0x00,0x1E,0x78,0x00,
0x00,0x07,0xE0,0x00,
0x80,0x01,0x80,0x01,
0x80,0x00,0x00,0x01,
0xC0,0x00,0x00,0x03,
0xF0,0x00,0x00,0x0F
};
	if (selected)
	{
		glColor3ub(255, 255, 200);
	}
	else
	{
		glColor3ub(255, 255, 255);
	}

	glPushMatrix();
	glColor3f(0,0,1);
		glTranslatef(x, y, 0.0);
		glScalef(0.5,1.0,0.02);
		if (selected)
		{
			glRotatef(ang, 0.0, 1.0, 0.0);
			glColor3ub(255, 255, 200);
		}
		else if (!show)
		{
			glColor3ub(255, 0, 0);
		}
		else
		{
			glRotatef(ang, 0.0, 1.0, 0.0);
			glColor3ub(255, 255, 255);
		}
        if(value == 3){
            glEnable (GL_POLYGON_STIPPLE);
                glColor3f (1.0, 1.0, 0.0);
                glPolygonStipple (tres);
        }
        else if(value == 6){
            glEnable (GL_POLYGON_STIPPLE);
            glColor3f (1.0, 1.0, 0.0);
            glPolygonStipple (seis);
        }
        else {
            glutSolidCube(2);
        }
		glColor3f(0,0,0);
		glutWireCube(2);
		glDisable(GL_POLYGON_STIPPLE);
	glPopMatrix();

}

bool Card::inside(float px, float py) {
	if (px < x || px > x + 1.1)
		return false;
	else if (py < y || py > y + 1.95)
		return false;

	return true;
}


bool Card::isSelected() {
	return selected;
}

void Card::setSelected(bool select) {
	selected = select;
}
